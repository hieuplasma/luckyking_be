generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(uuid())
  phoneNumber     String            @unique
  hashedPassword  String
  fullName        String?
  createdAt       DateTime          @default(now())
  updateAt        DateTime          @updatedAt
  email           String?
  address         String?
  identify        String?
  role            String            @default("user")
  status          String            @default("active")
  avatar          String?
  personNumber    String?
  displayId       Int?              @default(autoincrement())
  printerUrl      String?
  BankAccount     BankAccount[]
  Cart            Cart?
  Device          Device[]
  Lottery         Lottery[]
  MoneyAccount    MoneyAccount?
  Order           Order[]
  RewardWallet    RewardWallet?
  Transaction     Transaction[]
  WithdrawRequest WithdrawRequest[]
}

model Device {
  id          String   @id @default(uuid())
  deviceId    String
  lastLogin   DateTime
  userId      String
  deviceToken String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BankAccount {
  id            String   @id @default(uuid())
  displayId     Int?     @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  name          String?
  code          String?
  shortName     String?  @unique
  accountNumber String?
  amount        Int?     @default(0)
  userName      String?
  logo          String?
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([shortName, accountNumber], name: "uniqueAccount")
}

model MoneyAccount {
  id                  String                @id @default(uuid())
  balance             Int                   @default(0)
  decription          String?
  userId              String                @unique
  name                String?               @default("Ví LuckyKing")
  user                User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  BalanceFluctuations BalanceFluctuations[]
}

model RewardWallet {
  id                  String                @id @default(uuid())
  name                String?               @default("Ví nhận thưởng")
  balance             Int                   @default(0)
  decription          String?
  userId              String                @unique
  user                User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  BalanceFluctuations BalanceFluctuations[]
}

model BalanceFluctuations {
  id             String        @id @default(uuid())
  transactionId  String
  transaction    Transaction   @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  rewardWalletId String?
  rewardWallet   RewardWallet? @relation(fields: [rewardWalletId], references: [id], onDelete: Cascade)
  moneyAccountId String?
  moneyAccount   MoneyAccount? @relation(fields: [moneyAccountId], references: [id], onDelete: Cascade)
  balanceBefore  Int
  balanceAfter   Int
}

model Cart {
  id        String    @id @default(uuid())
  userId    String    @unique
  displayId Int?      @default(autoincrement())
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Lottery   Lottery[]
}

model Order {
  id                String        @id @default(uuid())
  amount            Int
  userId            String
  description       String?
  statusDescription String?
  confirmAt         DateTime?
  confirmBy         String?
  payment           String?
  tradingCode       String?
  surcharge         Int?          @default(0)
  dataPart          String?
  method            String        @default("keep")
  confrimUserId     String?
  status            OrderStatus?
  displayId         Int?          @default(autoincrement())
  createdAt         DateTime      @default(now())
  ticketType        String?       @default("basic")
  benefits          Int           @default(0)
  Lottery           Lottery[]
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transaction       Transaction[]
}

model Lottery {
  id            String         @id @default(uuid())
  type          String
  buyTime       DateTime       @default(now())
  resultTime    DateTime?
  deleteTime    DateTime?
  benefits      Int?           @default(0)
  userId        String
  imageFront    String?
  orderId       String?
  status        OrderStatus?
  imageBack     String?
  cartId        String?
  updatedAt     DateTime       @updatedAt
  amount        Int            @default(0)
  bets          Int[]
  displayId     Int?           @default(autoincrement())
  drawCode      Int
  drawTime      DateTime
  result        Json?
  Cart          Cart?          @relation(fields: [cartId], references: [id])
  Order         Order?         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  NumberLottery NumberLottery?
  transaction   Transaction[]
}

model NumberLottery {
  id           String  @id @default(uuid())
  lotteryId    String  @unique
  level        Int
  numberSets   Int
  numberDetail Json
  Lottery      Lottery @relation(fields: [lotteryId], references: [id], onDelete: Cascade)
}

model Transaction {
  id                  String                @id @default(uuid())
  type                String
  description         String                @default("")
  payment             String                @default("")
  userId              String
  amount              Int                   @default(0)
  destination         String?
  source              String?
  transactionPersonId String?
  displayId           Int?                  @default(autoincrement())
  createdAt           DateTime              @default(now())
  lotteryId           String?
  orderId             String?
  Lottery             Lottery?              @relation(fields: [lotteryId], references: [id], onDelete: Cascade)
  Order               Order?                @relation(fields: [orderId], references: [id], onDelete: Cascade)
  User                User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  BalanceFluctuations BalanceFluctuations[]
}

model WithdrawRequest {
  id                String    @id @default(uuid())
  displayId         Int?      @default(autoincrement())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  userId            String
  name              String?
  code              String?
  shortName         String?
  accountNumber     String?
  amount            Int?      @default(0)
  status            String    @default("pending")
  statusDescription String?
  confirmAt         DateTime?
  confirmBy         String?
  confirmUserId     String?
  userName          String?
  User              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ResultKeno {
  id             String    @id @default(uuid())
  drawCode       Int       @unique
  drawTime       DateTime
  result         String?
  drawn          Boolean   @default(false)
  approved       Boolean   @default(false)
  approvedAt     DateTime?
  approvedUserId String?
  displayId      Int?      @default(autoincrement())
}

model ResultMega {
  id             String    @id @default(uuid())
  drawCode       Int       @unique
  drawTime       DateTime
  result         String?
  drawn          Boolean   @default(false)
  jackpot1       BigInt?
  displayId      Int?      @default(autoincrement())
  approved       Boolean   @default(false)
  approvedAt     DateTime?
  approvedUserId String?
}

model ResultPower {
  id             String    @id @default(uuid())
  drawCode       Int       @unique
  drawTime       DateTime
  result         String?
  drawn          Boolean   @default(false)
  specialNumber  Int?
  jackpot1       BigInt?
  jackpot2       BigInt?
  approved       Boolean   @default(false)
  approvedAt     DateTime?
  approvedUserId String?
  displayId      Int?      @default(autoincrement())
}

model ResultMax3d {
  id             String    @id @default(uuid())
  type           String
  drawCode       Int
  drawTime       DateTime
  first          String[]
  second         String[]
  third          String[]
  drawn          Boolean   @default(false)
  special        String[]
  approved       Boolean   @default(false)
  approvedAt     DateTime?
  approvedUserId String?
  displayId      Int?      @default(autoincrement())

  @@unique([drawCode, type], name: "uniqueDraw")
}

model JackPot {
  id            String  @id @default(uuid())
  JackPot1Power BigInt?
  JackPot2Power BigInt?
  JackPotMega   BigInt?
}

model cms_async_ws_call {
  id            Int      @id(map: "PK_15b793d3960fa11f3f8f7506348") @default(autoincrement())
  public_id     String   @db.VarChar(128)
  action        String   @db.VarChar(256)
  object_type   String?  @db.VarChar(256)
  object_id     Int?
  finished      Int      @default(0) @db.SmallInt
  error_code    Int      @default(0) @db.SmallInt
  error_message String?  @db.VarChar(512)
  result        Json?
  caller_id     Int
  expired_dt    DateTime @db.Timestamptz(0)
  cms_user      cms_user @relation(fields: [caller_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_f38ac6708d79884ce99a2ca5a05")
}

model cms_email_sent {
  id                   Int        @id(map: "PK_0be963060a9425507c6811155f1") @default(autoincrement())
  email_type           Int        @default(1) @db.SmallInt
  linked_object_id     Int?
  from                 String     @db.VarChar(128)
  subject              String     @db.VarChar(512)
  to                   String     @db.VarChar(1024)
  content              String
  bounced_addrs        String[]   @db.VarChar
  transport_message_id String     @db.VarChar(128)
  delivery_status      Int        @default(0) @db.SmallInt
  spam_reported        Int        @default(0) @db.SmallInt
  creation_dt          DateTime   @default(now()) @db.Timestamptz(0)
  delivery_dt          DateTime?  @db.Timestamptz(0)
  cms_user             cms_user[]
}

model cms_email_sync_status {
  id           Int      @id(map: "PK_19af2e747284dddd9a4e7c86ab4") @default(autoincrement())
  sync_state   Int      @default(0)
  last_sync_dt DateTime @default(now()) @db.Timestamptz(0)
}

model cms_preauth_token {
  id        Int       @id(map: "PK_ebde5965241921429cca4346476") @default(autoincrement())
  user_id   Int?
  expire_dt DateTime  @db.Timestamptz(0)
  token     String?   @db.VarChar(64)
  cms_user  cms_user? @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_98d842825be8d1f77e29cd48413")

  @@index([user_id], map: "IDX_98d842825be8d1f77e29cd4841")
}

model cms_session {
  id           Int       @id(map: "PK_937809889a2847c92d365ce194a") @default(autoincrement())
  session_id   String    @db.VarChar
  access_token String    @db.VarChar(512)
  user_id      Int?
  cms_user     cms_user? @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_ffb853ccef83e2b324dcef56dd0")
}

model cms_setting_params {
  id           Int      @id(map: "PK_3e818b3d36c328ab91fb6a22a33") @default(autoincrement())
  auto_approve String[] @default(["keno"])
}

model cms_user {
  id                    Int                   @id(map: "PK_1e641dd45089529dc60ab0d3176") @default(autoincrement())
  email                 String                @unique(map: "user_email_unique_idx") @db.VarChar(256)
  phone_number          String?               @db.VarChar(32)
  first_name            String?               @db.VarChar(128)
  last_name             String                @db.VarChar(128)
  password              String                @db.VarChar(256)
  confirmation_token    String?               @db.VarChar(128)
  salt                  String                @db.VarChar(255)
  enabled               Int                   @default(0) @db.SmallInt
  user_type             Int                   @default(1) @db.SmallInt
  confirmation_email_id Int?
  last_login            DateTime?             @db.Timestamptz(0)
  creation_dt           DateTime              @default(now()) @db.Timestamptz(0)
  password_requested_at DateTime?             @db.Timestamptz(0)
  cms_async_ws_call     cms_async_ws_call[]
  cms_preauth_token     cms_preauth_token[]
  cms_session           cms_session[]
  cms_email_sent        cms_email_sent?       @relation(fields: [confirmation_email_id], references: [id], onUpdate: NoAction, map: "FK_00bf1ecf58a37ebef2575da83f9")
  cms_user_action       cms_user_action[]
  cms_user_oauth_token  cms_user_oauth_token?
}

model cms_user_action {
  id         Int       @id(map: "PK_0cbf3a6ad3eb92d1bc939ab08a7") @default(autoincrement())
  user_id    Int?
  action_dt  DateTime  @db.Timestamptz(0)
  action     String?   @db.VarChar(255)
  object     String[]  @db.VarChar
  object_ids String[]  @db.VarChar
  detail     Json
  cms_user   cms_user? @relation(fields: [user_id], references: [id], onUpdate: NoAction, map: "FK_dff16bed8c8ac186fcdcf44e946")
}

model cms_user_oauth_token {
  id                    Int       @id(map: "PK_68ac18e4ebeef5b1a69ed58f3e2") @default(autoincrement())
  oauth_provider        Int
  user_id               Int       @unique(map: "UQ_830a95c218d36815b33ef270fe3")
  access_token          String    @db.VarChar(2048)
  refresh_token         String?   @db.VarChar(2048)
  access_token_deadline DateTime? @db.Timestamptz(0)
  cms_user              cms_user  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_830a95c218d36815b33ef270fe3")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  ERROR
  RETURNED
  WON
  PAID
  NO_PRIZE
  CART
  LOCK
  PRINTED
}
