generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(uuid())
  phoneNumber     String            @unique
  hashedPassword  String
  fullName        String?
  createdAt       DateTime          @default(now())
  updateAt        DateTime          @updatedAt
  email           String?
  address         String?
  identify        String?
  role            String            @default("user")
  status          String            @default("active")
  avatar          String?
  personNumber    String?
  displayId       Int?              @default(autoincrement())
  printerUrl      String?
  currentDeviceId String?
  BankAccount     BankAccount[]
  Cart            Cart?
  Device          Device[]
  Lottery         Lottery[]
  MoneyAccount    MoneyAccount?
  Order           Order[]
  RewardWallet    RewardWallet?
  Transaction     Transaction[]
  WithdrawRequest WithdrawRequest[]
  LotteryAssigned Lottery[]         @relation(name: "assignedTo")
}

model Device {
  id          String   @id @default(uuid())
  deviceId    String
  lastLogin   DateTime
  userId      String
  deviceToken String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BankAccount {
  id            String   @id @default(uuid())
  displayId     Int?     @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  name          String?
  code          String?
  shortName     String?  @unique
  accountNumber String?
  amount        BigInt?  @default(0)
  userName      String?
  logo          String?
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([shortName, accountNumber], name: "uniqueAccount")
}

model MoneyAccount {
  id                  String                @id @default(uuid())
  balance             BigInt                @default(0)
  decription          String?
  userId              String                @unique
  name                String?               @default("Ví LuckyKing")
  user                User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  BalanceFluctuations BalanceFluctuations[]
}

model RewardWallet {
  id                  String                @id @default(uuid())
  name                String?               @default("Ví nhận thưởng")
  balance             BigInt                @default(0)
  decription          String?
  userId              String                @unique
  user                User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  BalanceFluctuations BalanceFluctuations[]
}

model BalanceFluctuations {
  id             String        @id @default(uuid())
  transactionId  String?
  transaction    Transaction?  @relation(fields: [transactionId], references: [id])
  rewardWalletId String?
  rewardWallet   RewardWallet? @relation(fields: [rewardWalletId], references: [id], onDelete: Cascade)
  moneyAccountId String?
  moneyAccount   MoneyAccount? @relation(fields: [moneyAccountId], references: [id], onDelete: Cascade)
  balanceBefore  BigInt
  balanceAfter   BigInt
}

model Cart {
  id        String    @id @default(uuid())
  userId    String    @unique
  displayId Int?      @default(autoincrement())
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Lottery   Lottery[]
}

model Order {
  id                String        @id @default(uuid())
  amount            BigInt
  userId            String
  description       String?
  statusDescription String?
  confirmAt         DateTime?
  confirmBy         String?
  payment           String?
  tradingCode       String?
  surcharge         Int?          @default(0)
  dataPart          String?
  method            String        @default("keep")
  confrimUserId     String?
  status            OrderStatus?
  displayId         Int?          @default(autoincrement())
  createdAt         DateTime      @default(now())
  ticketType        String?       @default("basic")
  benefits          BigInt        @default(0)
  Lottery           Lottery[]
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transaction       Transaction[]
}

model Lottery {
  id              String         @id @default(uuid())
  type            String
  buyTime         DateTime       @default(now())
  resultTime      DateTime?
  deleteTime      DateTime?
  confirmedAt     DateTime?
  benefits        BigInt?        @default(0)
  userId          String
  imageFront      String?
  orderId         String?
  status          OrderStatus?
  imageBack       String?
  cartId          String?
  updatedAt       DateTime       @updatedAt
  amount          Int            @default(0)
  surcharge       Int            @default(0)
  bets            Int[]
  displayId       Int?           @default(autoincrement())
  drawCode        Int
  drawTime        DateTime
  result          Json?
  Cart            Cart?          @relation(fields: [cartId], references: [id])
  Order           Order?         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignedStaffId String?
  assignedStaff   User?          @relation(name: "assignedTo", references: [id], fields: [assignedStaffId])
  NumberLottery   NumberLottery?
  transaction     Transaction[]
}

model NumberLottery {
  id           String  @id @default(uuid())
  lotteryId    String  @unique
  level        Int
  numberSets   Int
  numberDetail Json
  Lottery      Lottery @relation(fields: [lotteryId], references: [id], onDelete: Cascade)
}

model Transaction {
  id                  String                @id @default(uuid())
  type                String
  description         String                @default("")
  payment             String                @default("")
  userId              String
  amount              BigInt                @default(0)
  destination         String?
  source              String?
  transactionPersonId String?
  displayId           Int?                  @default(autoincrement())
  createdAt           DateTime              @default(now())
  lotteryId           String?
  orderId             String?
  Lottery             Lottery?              @relation(fields: [lotteryId], references: [id], onDelete: Cascade)
  Order               Order?                @relation(fields: [orderId], references: [id], onDelete: Cascade)
  User                User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  // balanceFlucId       String?              @unique
  // BalanceFluctuations BalanceFluctuations? @relation(fields: [balanceFlucId], references: [id], onDelete: Cascade)
  BalanceFluctuations BalanceFluctuations[]
  withdrawRequestId   String?               @unique
  WithdrawRequest     WithdrawRequest?      @relation(fields: [withdrawRequestId], references: [id])
}

model WithdrawRequest {
  id                String       @id @default(uuid())
  displayId         Int?         @default(autoincrement())
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  userId            String
  name              String?
  code              String?
  shortName         String?
  accountNumber     String?
  amount            BigInt?      @default(0)
  status            String       @default("pending")
  statusDescription String?
  confirmAt         DateTime?
  confirmBy         String?
  confirmUserId     String?
  userName          String?
  User              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  transaction       Transaction?
}

model ResultKeno {
  id             String    @id @default(uuid())
  drawCode       Int       @unique
  drawTime       DateTime
  result         String?
  drawn          Boolean   @default(false)
  approved       Boolean   @default(false)
  approvedAt     DateTime?
  approvedUserId String?
  displayId      Int?      @default(autoincrement())
}

model ResultMega {
  id             String    @id @default(uuid())
  drawCode       Int       @unique
  drawTime       DateTime
  result         String?
  drawn          Boolean   @default(false)
  jackpot1       BigInt?
  displayId      Int?      @default(autoincrement())
  approved       Boolean   @default(false)
  approvedAt     DateTime?
  approvedUserId String?
}

model ResultPower {
  id             String    @id @default(uuid())
  drawCode       Int       @unique
  drawTime       DateTime
  result         String?
  drawn          Boolean   @default(false)
  specialNumber  Int?
  jackpot1       BigInt?
  jackpot2       BigInt?
  approved       Boolean   @default(false)
  approvedAt     DateTime?
  approvedUserId String?
  displayId      Int?      @default(autoincrement())
}

model ResultMax3d {
  id             String    @id @default(uuid())
  type           String
  drawCode       Int
  drawTime       DateTime
  first          String[]
  second         String[]
  third          String[]
  drawn          Boolean   @default(false)
  special        String[]
  approved       Boolean   @default(false)
  approvedAt     DateTime?
  approvedUserId String?
  displayId      Int?      @default(autoincrement())

  @@unique([drawCode, type], name: "uniqueDraw")
}

model JackPot {
  id            String  @id @default(uuid())
  JackPot1Power BigInt?
  JackPot2Power BigInt?
  JackPotMega   BigInt?
}

model Config {
  id                  String  @id @default(uuid())
  autoRewardThreshold Int     @default(5000000)
  listBank            Json?
  surcharge           Int?    @default(0)
  kenoSurcharge       Int?    @default(0)
  kenoDuration        Int?    @default(30)
  kenoPauseTime       Int?    @default(30)
  zaloToken           String?
  zaloRefeshToken     String?
}

model Otp {
  id          String    @id @default(uuid())
  otp         String?
  phoneNumber String?
  iat         DateTime?
  exp         DateTime?
}

enum OrderStatus {
  PENDING
  CONFIRMED
  ERROR
  RETURNED
  WON
  PAID
  NO_PRIZE
  CART
  LOCK
  PRINTED
}
